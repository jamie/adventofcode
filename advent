#!/usr/bin/env ruby
require "fileutils"
require "bundler/setup"
require "concurrent"
require "concurrent-edge"

if ARGV[0] == "get"
  require "tzinfo"

  AOC_TIMEZONE = TZInfo::Timezone.get("US/Eastern")
  AOC_OFFSET = AOC_TIMEZONE.current_period.utc_total_offset / 60 / 60
  LOCAL_OFFSET = Time.now.utc_offset / 60 / 60

  # hack to download input
  now = Time.now.getlocal("%+.2d:00" % AOC_OFFSET)
  year = (ARGV[2] || now.year).to_i
  day = (ARGV[1] || (1 if now.month != 12) || now.day + 1).to_i
  out = "%4d/%02d/input" % [year, day]

  offset = LOCAL_OFFSET - AOC_OFFSET
  tday = day.to_i
  if offset < 0
    tday -= 1
    offset += 24
  end
  unlock_time = Time.local(year, 12, tday, offset)

  if File.exist?(out)
    day += 1
    out = "%4d/%02d/input" % [year, day]
  end
  FileUtils.mkdir_p("%4d/%02d" % [year, day])

  unless File.exist?(out)
    url = "https://adventofcode.com/%d/day/%d/input" % [year, day]

    puts "Waiting for #{unlock_time}" if Time.now < unlock_time
    loop do
      wait = (unlock_time - Time.now).to_i
      break if wait < 0

      if wait < 100
        puts "%d seconds to go..." % [wait]
        sleep 1
      elsif wait < 100 * 60
        puts "%d+ minutes to go..." % [wait/60]
        sleep 60
      else
        puts "%d+ hours to go..." % [wait/60/60]
        sleep 60 * 60
      end
    end

    puts "> curl #{url}"
    session = File.read(".session")
    `curl -o #{out} -b session=#{session} #{url}`
    `open https://adventofcode.com/#{"%d/day/%d"%[year,day]}`
  end

  exit
end

require "./lib/runner"

## ARGV can be provided in any order, [year, day, lang] being distinct.

# Extract language, default all
lang = ARGV.detect { |v| v =~ /^[a-z]+/ }
ARGV.delete(lang)
ext = lang ? Runner::LANG_EXTENSION[lang] : "*"

# Extract year, default latest
year = ARGV.detect { |v| v =~ /\A2[0-9]{3}\z/ }
ARGV.delete(year)
year ||= "*" # Dir["20*"].last

# Extract day, default whole-year
day = ARGV.detect { |v| v =~ /\A\d?\d\z/ }
day = "0#{day}" if day && day.to_i < 10
day = "*" if day.nil?

# Scan all relevant files to assemble row/column headers
runners = Dir["#{year}/#{day}/*.#{ext}"].map { |script| Runner.for(script) }.compact
langs = runners.map(&:lang).sort.uniq
dates = runners.map { |runner| [runner.year, runner.day] }.sort.uniq

totals = {}
# Render table
puts "Date       " + langs.map { |lang| "%10s" % lang }.join(" ")

thread_pool = Concurrent::Throttle.new(Concurrent.processor_count - 1)
results = {}
# Fork all processes
dates.each do |year, day|
  runs = langs.map do |lang|
    results[[year, day, lang]] = thread_pool.future do
      Runner.find(year, day, lang).run
    end
  end
end

runs = []
# Collect values, output table
dates.each do |year, day|
  runs = langs.map do |lang|
    results[[year, day, lang]].value.tap do |run|
      next if run.nil?
      totals[lang] ||= 0.0
      run.write! if ARGV.include?("--save")
      totals[lang] += run.duration
    end
  end.compact

  date = ("%4d-%02d" % [year, day]).ljust(10)
  puts [date, runs.map(&:success_duration_s)].flatten.join(" ")
end

if dates.size > 1
  puts
  # Render Summary
  puts "           " + langs.map { |lang| "%10s" % lang }.join(" ")
  puts "Total Time:" + langs.map { |lang| "%9.2fs" % totals[lang] }.join(" ")
else
  puts
  puts runs.map(&:solutions)
end
