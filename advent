#!/usr/bin/env ruby

if ARGV[0] == 'get'
  # hack to download input
  now = Time.now.utc - 5*60*60
  year, day = now.year, (ARGV[1] || now.day)
  out = "%4d/input/%02d" % [year, day]

  unless File.exist?(out)
    url = "https://adventofcode.com/%d/day/%d/input" % [year, day]
    puts "> curl #{url}"
    session = File.read(".session")
    `curl -o #{out} -b session=#{session} #{url}`
  end

  exit
end


class Runner
  attr_reader :script, :duration, :solutions
  attr_reader :year, :day, :lang

  def self.find(year, day, lang)
    script = Dir["#{year}/#{lang}/*#{day}*.*"].first
    if script
      self.for(script)
    else
      Null.new
    end
  end

  def self.for(script)
    _year, lang, file = script.split('/')
    if file =~ /\d+/
      const_get("Runner::#{lang.capitalize}").new(script)
    else
      nil
    end
  end

  def initialize(script)
    @script = script
    @year, @lang, file = script.split('/')
    @day = file.match(/(\d+)/).captures[0]
  end

  def run
    build
    start = Time.now
    output = execute
    stop = Time.now

    @duration = stop-start
    @solutions = output.chomp.split("\n")
    self
  end

  def duration_s
    "%9.2fs" % @duration
  end

  private def build
    # NOP for most
  end

  class Null < Runner
    def initialize
    end

    def run
      self
    end

    def duration
      0.0
    end

    def duration_s
      "          "
    end
  end

  class Nim < Runner
    private def build
      # Building in release mode for performance
      `nim c --hints=off -p=lib/nim -d=release #{script}`
    end
    private def execute
      # Redirecting stderr to strip build debug output
      `#{script.split('.')[0]}`
    end
  end

  class Ruby < Runner
    private def execute
      `ruby -Ilib/ruby -I#{year}/#{lang} #{script}`
    end
  end
end


## ARGV can be provided in any order, [year, day, lang] being distinct.

# Extract language, default all
lang = ARGV.detect{|v| v =~ /[a-z]+/}
ARGV.delete(lang)
lang ||= '*'

# Extract year, default latest
year = ARGV.detect{|v| v =~ /\A2[0-9]{3}\z/}
ARGV.delete(year)
year ||= Dir["20*"].last

# Extract day, default whole-year
day = ARGV.detect{|v| v =~ /\A\d?\d\z/}
day = "0#{day}" if day && day.to_i < 10
day = "*" if day.nil?

# Scan all relevant files to assemble row/column headers
runners = Dir["#{year}/#{lang}/*#{day}*.*"].map{|script| Runner.for(script) }.compact
langs = runners.map(&:lang).sort.uniq
dates = runners.map{|runner| [runner.year, runner.day]}.sort.uniq

totals = {}
# Render table
puts "Date       " + langs.map{|lang| "%10s" % lang}.join(' ') + "  Solutions"
dates.each do |year, day|
  date = "#{year}-#{day}".ljust(10)
  runs = langs.map do |lang|
    Runner.find(year, day, lang).run.tap do |run|
      totals[lang] ||= 0.0
      totals[lang] += run.duration
    end
  end

  solutions = runs.map(&:solutions).compact.uniq
  solutions = [["Discrepancy"]] if solutions.size > 1
  solution = solutions.first

  puts [date, runs.map(&:duration_s), nil, solution[0]].flatten.join(' ')
  solution[1..-1].each{|line| puts " "*(11*(runs.size+1)+1) + line }
end
if dates.size > 1
  puts
  # Render Summary
  puts "           " + langs.map{|lang| "%10s" % lang}.join(' ')
  puts "Total Time:" + langs.map{|lang| "%9.2fs" % totals[lang] }.join(' ')
end
