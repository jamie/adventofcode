#!/usr/bin/env ruby

if ARGV[0] == 'get'
  # hack to download input
  now = Time.now.utc - 5*60*60
  out = "%4d/input/%02d" % [now.year, now.day]

  unless File.exist?(out)
    url = "https://adventofcode.com/%d/day/%d/input" % [now.year, now.day]
    session = File.read(".session")
    `curl -o #{out} -b session=#{session} #{url}`
  end

  exit
end

## ARGV can be provided in any order, [year, day, lang] being distinct.

# Extract language, default all
lang = ARGV.detect{|v| v =~ /[a-z]+/}
ARGV.delete(lang)
lang ||= '*'

# Extract year, default latest
year = ARGV.detect{|v| v =~ /\A2[0-9]{3}\z/}
ARGV.delete(year)
year ||= Dir["20*"].last

# Extract day, default whole-year
day = ARGV.detect{|v| v =~ /\A\d?\d\z/}
day = "0#{day}" if day && day.to_i < 10
day = "*" if day.nil?

def run(script)
  year, lang, _file = script.split('/')

  output = case lang
  when 'nim'
    # Redirecting stderr to strip build debug output
    `nim c --hints=off -p=lib/nim --run #{script}`
  when 'ruby'
    `ruby -Ilib/ruby -I#{year}/#{lang} #{script}`
  else
    return nil
  end

  output.chomp.split("\n")
end

Dir["#{year}/#{lang}/*#{day}*.*"].sort.each do |script|
  start = Time.now
  solution, solution2 = run(script)
  stop = Time.now
  duration = stop-start
  next if solution.nil?

  puts "(%5.2fs) %-15s   %-10s %-10s" % [duration, script, solution, solution2]
end
